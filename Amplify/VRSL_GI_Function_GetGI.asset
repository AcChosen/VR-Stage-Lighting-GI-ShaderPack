%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: VRSL_GI_Function_GetGI
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor\n// Available at the Unity
    Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=18935\n537.8571;-1080;1920;1019;3322.247;870.7198;2.845922;True;True\nNode;AmplifyShaderEditor.CommentaryNode;125;-381.2561,-464.8267;Inherit;False;375;142;Allows
    For \"Directional\" Support;1;108;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;115;134.0645,579.3624;Inherit;False;268.1537;185.8407;GI
    Strength Properties;2;48;69;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;114;-1950.996,953.0881;Inherit;False;690;429;Shadow
    Mask Selection Functions;3;107;106;93;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;111;-702.8136,1453.315;Inherit;False;266.3532;323.2416;Shadow
    Mask 3 Strength Props;4;102;105;103;104;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;112;-263.8998,-731.9431;Inherit;False;595;233;Custom
    GI Light Texture Goes Here;2;67;33;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;109;-1276.311,1448.774;Inherit;False;261;318;Shadow
    Mask 1 Strength Props;4;97;96;95;94;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;116;-1231.496,504.5245;Inherit;False;1271.182;851.2366;Shadow
    Mask Stuff;16;79;81;80;78;77;71;85;84;72;89;83;82;73;92;90;87;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;110;-990.7971,1458.993;Inherit;False;263.3532;315.2416;Shadow
    Mask 2 Strength Props;4;98;101;99;100;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;118;582.7308,-96.22808;Inherit;False;580.0001;236;Diffuse
    Functions;2;51;117;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;121;-397.5657,-286.1147;Inherit;False;403;188;Get
    Pixel Normals;2;2;66;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;122;-862.5657,-68.11475;Inherit;False;803;199;Get
    Eye Vector;5;10;65;59;57;55;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;123;-875.432,135.0398;Inherit;False;417;173;Get
    Pixel Position;2;1;54;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;124;-1997.966,326.2851;Inherit;False;1470.7;136.4;This
    is the only way I could figure out how to add CGINC files to Amplify without
    it distrubing that actual flow of the shader. Plugging it into AO doesn't actually
    change how AO works. Ignore This.;3;47;8;32;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;113;113.7893,-457.7617;Inherit;False;637;320;Specular
    Functions;5;53;30;31;52;29;;1,1,1,1;0;0\nNode;AmplifyShaderEditor.RangedFloatNode;94;-1271.992,1485.511;Inherit;False;Property;_UseVRSLShadowMask1RStrength;GI
    ShadowMask 1 R Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;2;-177.3203,-240.57;Inherit;False;World
    Normals;3;3;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.RangedFloatNode;98;-983.757,1699.244;Inherit;False;Property;_UseVRSLShadowMask2AStrength;GI
    ShadowMask 2 A Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.SamplerNode;82;-589.8652,927.5475;Inherit;True;Property;_TextureSample1;Texture
    Sample 1;9;0;Create;True;0;0;0;False;0;False;-1;None;None;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.RangedFloatNode;104;-694.8307,1490.022;Inherit;False;Property;_UseVRSLShadowMask3RStrength;GI
    ShadowMask 3 R Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.StaticSwitch;53;376.9987,-256.5939;Inherit;False;Property;_VRSLGIEnableSpecular;VRSLGI
    Enable Specular;6;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.ColorNode;89;-568.8772,556.9233;Inherit;False;Constant;_DefaultShadowMask;DefaultShadowMask;12;0;Create;True;0;0;0;False;0;False;1,1,1,1;0,0,0,0;True;0;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.RangedFloatNode;103;-693.1307,1560.022;Inherit;False;Property;_UseVRSLShadowMask3GStrength;GI
    ShadowMask 3 G Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.RangedFloatNode;95;-1269.321,1555.418;Inherit;False;Property;_UseVRSLShadowMask1GStrength;GI
    ShadowMask 1 G Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.RangedFloatNode;102;-693.1307,1696.022;Inherit;False;Property;_UseVRSLShadowMask3AStrength;GI
    ShadowMask 3 A Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.TexCoordVertexDataNode;77;-1219.199,572.2672;Inherit;False;0;2;0;5;FLOAT2;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.RangedFloatNode;48;140.5678,615.6299;Inherit;False;Property;_VRSLGIStrength;GI
    Overall Strength;12;0;Fetch;False;0;0;0;True;0;False;1;0;0;0;0;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;1;-652,183.5;Inherit;False;World
    Position;3;2;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;117;601.7308,-53.22814;Inherit;False;           
    range = distance(worldPos, lightPos.xyz)@$            lightDirection = normalize(lightPos.xyz
    - worldPos)@$            #if _VRSLGIDIFFUSETYPE_TOON$                atten =
    saturate(dot(lightDirection, worldNormal) )@$                atten = lerp(0.0025,
    1.0, atten)@$                atten = smoothstep(0,0.01,atten)@$            #elif
    _VRSLGIDIFFUSETYPE_TINT$                atten = 1.0f@$            #else$               
    atten = saturate(dot(lightDirection, worldNormal) )@$            #endif$           
    range*= rangeController@$            falloff = 1.0 / (range * range)@;7;Create;8;False;worldPos;FLOAT3;0,0,0;In;;Inherit;False;False;worldNormal;FLOAT3;0,0,0;In;;Inherit;False;False;lightPos;FLOAT3;0,0,0;In;;Inherit;False;False;lightDirection;FLOAT3;0,0,0;Out;;Inherit;False;False;falloff;FLOAT;0;Out;;Inherit;False;False;atten;FLOAT;0;Out;;Inherit;False;True;rangeController;FLOAT;0;In;;Inherit;False;True;range;FLOAT;0;Out;;Inherit;False;DiffuseFunction;False;True;3;-1;-1;-1;;False;9;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT3;0,0,0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;5;FLOAT;0;FLOAT3;5;FLOAT;6;FLOAT;7;FLOAT;9\nNode;AmplifyShaderEditor.NormalizeNode;10;-204.2271,10.4908;Inherit;False;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.RangedFloatNode;99;-986.757,1563.244;Inherit;False;Property;_UseVRSLShadowMask2GStrength;GI
    ShadowMask 2 G Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;24;193.8411,160.4972;Inherit;False;float
    shadowmask = 1.0@$ float3 finalOut = 0.0@      $$ [loop]$        for (int x =
    0@ x < lightCount@ x++)$        {$            $            //Begin Diffuse Stuff$$$           
    #if _VRSLGIENABLEDIRECTIONALSPOTLIGHTS_ON$                #ifdef _VRSLGIGLOBALLIGHTTEXTURE_ON$                   
    float4 rawLightColor = _Udon_VRSL_GI_LightTexture.Load( int3(x, 0, 0) )@$                   
    float4 lightPos = _Udon_VRSL_GI_LightTexture.Load( int3(x, 1, 0) )@$               
    #else$                    float4 rawLightColor = _VRSL_LightTexture.Load( int3(x,
    0, 0) )@$                    float4 lightPos = _VRSL_LightTexture.Load( int3(x,
    1, 0) )@$                #endif$                float isSpotlight = lightPos.w@$           
    #else$                #ifdef _VRSLGIGLOBALLIGHTTEXTURE_ON$                   
    float4 rawLightColor = _Udon_VRSL_GI_LightTexture.Load( int3(x, 0, 0) )@   $                   
    float4 lightPos = _Udon_VRSL_GI_LightTexture.Load( int3(x, 1, 0) )@$               
    #else$                    float4 rawLightColor = _VRSL_LightTexture.Load( int3(x,
    0, 0) )@   $                    float4 lightPos = _VRSL_LightTexture.Load( int3(x,
    1, 0) )@$                #endif$            #endif$            float3 lightColor
    = rawLightColor.rgb * (0.5 * rawLightColor.a)@$            float specular = 1.0@$           
    $            float falloff = 1.0@$            float atten = 1.0@$           
    float range = 1.0@$            float3 lightDirection = float3(1.0,1.0,1.0)@$           
    $            //Begin Diffuse Stuff$            DiffuseFunction(worldPos, worldNormal,
    lightPos.xyz, lightDirection, falloff, atten, rawLightColor.a, range)@$           
    //End Diffuse Stuff$$            //Begin Specular Stuff$            #if _VRSLGIENABLESPECULAR_ON$               
    #ifdef _VRSLGISPECULARTYPE_GGX$                    specular = GGXSpec(worldNormal,
    viewDirection, lightDirection, roughness)@$                #elif _VRSLGISPECULARTYPE_BECKMAN$                   
    specular = BeckmanSpec(worldNormal, viewDirection, lightDirection, roughness)@$               
    #elif _VRSLGISPECULARTYPE_PHONG$                    specular = PhongSpec(worldNormal,
    viewDirection, lightDirection, roughness)@$                #endif$               
    specular = lerp(1.0, specular, metallic) * specularMultiply@$               
    specular = specular * specular@$$                specular *= (1/(range*0.5))@$               
    //specular *= CalcLuminance(rawLightColor.rgb)@$            #endif$           
    //End Specular Stuff$$            //Begin ShadowMask Stuff$            #ifndef
    VRSL_GI_PROJECTOR$                #if defined(_VRSLGISHADOWMASK1_ON) || defined(_VRSLGISHADOWMASK2_ON)
    || defined(_VRSLGISHADOWMASK3_ON)$                    lightPos.w = (frac(lightPos.w
    * 0.1)) * 10@$$                    int maskSelection = (int) floor(lightPos.w)@$                   
    int maskChannel = (int) floor(frac(lightPos.w) * 10)@$$                    shadowmask
    = saturate(CalculateShadowMask(float4(_UseVRSLShadowMask1RStrength,$                   
    _UseVRSLShadowMask1GStrength,_UseVRSLShadowMask1BStrength, _UseVRSLShadowMask1AStrength),$                   
    float4(_UseVRSLShadowMask2RStrength, _UseVRSLShadowMask2GStrength, _UseVRSLShadowMask2BStrength,
    _UseVRSLShadowMask2AStrength),$                    float4(_UseVRSLShadowMask3RStrength,
    _UseVRSLShadowMask3GStrength, _UseVRSLShadowMask3BStrength, _UseVRSLShadowMask3AStrength)$                   
    , maskChannel, maskSelection,$                    shadowmask1, shadowmask2, shadowmask3))@$               
    #endif             $                $            #endif$            //End Shadowmask
    Stuff$$            //Combine$            lightColor = lerp(float3(0,0,0), lightColor
    * overallStrength, shadowmask)@$            $$            #if _VRSLGIENABLEDIRECTIONALSPOTLIGHTS_ON$               
    $               if(isSpotlight > 180.0f)$               {$                   
    #ifdef _VRSLGIGLOBALLIGHTTEXTURE_ON$                        float4 rawLightDirection
    = _Udon_VRSL_GI_LightTexture.Load( int3(x, 3, 0) )@    $                    #else$                       
    float4 rawLightDirection = _VRSL_LightTexture.Load( int3(x, 3, 0) )@    $                   
    #endif$                    float3 spotlightDir = rawLightDirection.xyz@$                   
    float angle = (floor(rawLightDirection.w - 1)) / 255@$                    float
    blend = frac(rawLightDirection.w)@$                    angle = angle * 180.0@$                   
    float theta = dot(lightDirection, normalize(-spotlightDir))@$                   
    float outerCone = cos(radians(angle))@$                    float spotlight =
    clamp(theta - outerCone,0.0,1.0)@$                    atten = lerp(atten, atten*spotlight,
    blend)@$                    specular = lerp(specular, specular*spotlight, blend)@$              
    }$            #endif$$            finalOut += falloff * lightColor  * atten *
    diffuseColor * specular@$            //finalOut += (spotlight)@$            $       
    }$$return finalOut * occlusion@;3;Create;13;True;lightCount;INT;0;In;;Inherit;False;True;worldNormal;FLOAT3;0,0,0;In;;Inherit;False;True;viewDirection;FLOAT3;0,0,0;In;;Inherit;False;True;worldPos;FLOAT3;0,0,0;In;;Inherit;False;True;occlusion;FLOAT;0;In;;Inherit;False;True;roughness;FLOAT;0;In;;Inherit;False;True;metallic;FLOAT;0;In;;Inherit;False;True;diffuseColor;FLOAT3;0,0,0;In;;Inherit;False;True;shadowmask1;FLOAT4;0,0,0,0;In;;Inherit;False;True;shadowmask2;FLOAT4;0,0,0,0;In;;Inherit;False;True;shadowmask3;FLOAT4;0,0,0,0;In;;Inherit;False;True;specularMultiply;FLOAT;1;In;;Inherit;False;True;overallStrength;FLOAT;0;In;;Inherit;False;Get
    GI;True;False;5;117;29;30;31;93;;False;13;0;INT;0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT3;0,0,0;False;8;FLOAT4;0,0,0,0;False;9;FLOAT4;0,0,0,0;False;10;FLOAT4;0,0,0,0;False;11;FLOAT;1;False;12;FLOAT;0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.RangedFloatNode;105;-694.1307,1628.722;Inherit;False;Property;_UseVRSLShadowMask3BStrength;GI
    ShadowMask 3 B Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.RangedFloatNode;97;-1270.992,1693.602;Inherit;False;Property;_UseVRSLShadowMask1AStrength;GI
    ShadowMask 1 A Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;8;-1817.57,364.8351;Inherit;False;Ambient
    Occlusion;1;5;False;1;0;FLOAT;1;False;1;FLOAT;0\nNode;AmplifyShaderEditor.WorldPosInputsNode;54;-855.432,168.0398;Inherit;False;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.FunctionInput;120;-275.604,392.8751;Inherit;False;Metallic;1;1;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;119;-151.604,331.8751;Inherit;False;Roughness;1;0;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;93;-1942.463,990.099;Inherit;False;       
    float s1 =  1.0f@$        float s1Strength = 0.0f@$$        [branch]$       
    switch(maskSelection)$        {$            default:$                break@$           
    #if defined(_VRSLGISHADOWMASK1_ON)$            case 1:$                SetShadowMaskChannel(maskChannel,s1,s1Strength,shadowMask1,mask1Strength)@$               
    break@$            #endif$            #if defined(_VRSLGISHADOWMASK2_ON)$           
    case 2:$                SetShadowMaskChannel(maskChannel,s1,s1Strength,shadowMask2,mask2Strength)@$               
    break@$            #endif$            #if defined(_VRSLGISHADOWMASK3_ON)$           
    case 3:$                SetShadowMaskChannel(maskChannel,s1,s1Strength,shadowMask3,mask3Strength)@$               
    break@  $            #endif              $        }$$        return lerp(1,s1,s1Strength)@;1;Create;8;True;mask1Strength;FLOAT4;0,0,0,0;In;;Inherit;False;True;mask2Strength;FLOAT4;0,0,0,0;In;;Inherit;False;True;mask3Strength;FLOAT4;0,0,0,0;In;;Inherit;False;True;maskChannel;INT;0;In;;Inherit;False;True;maskSelection;INT;0;In;;Inherit;False;True;shadowMask1;FLOAT4;0,0,0,0;In;;Inherit;False;True;shadowMask2;FLOAT4;0,0,0,0;In;;Inherit;False;True;shadowMask3;FLOAT4;0,0,0,0;In;;Inherit;False;CalculateShadowMask;False;True;1;106;;False;8;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0,0,0,0;False;2;FLOAT4;0,0,0,0;False;3;INT;0;False;4;INT;0;False;5;FLOAT4;0,0,0,0;False;6;FLOAT4;0,0,0,0;False;7;FLOAT4;0,0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;5;-77.6555,429.2696;Inherit;False;Albedo
    Color;3;4;False;1;0;FLOAT3;1,1,1;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.SimpleAddOpNode;47;-1575.727,367.1832;Inherit;False;2;2;0;FLOAT;0;False;1;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.TexCoordVertexDataNode;81;-1190.685,1057.413;Inherit;False;4;2;0;5;FLOAT2;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.WorldSpaceCameraPos;55;-852.311,-26.6272;Inherit;False;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.CustomExpressionNode;59;-476.8322,-14.76019;Inherit;False;   
    #if (SHADER_TARGET < 30) || UNITY_STANDARD_SIMPLE$        return normalize(n)@$   
    #else$        return n@ // will normalize per-pixel instead$    #endif;3;Create;1;True;n;FLOAT3;0,0,0;In;;Inherit;False;Get
    Eye Vector;True;False;0;;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.StaticSwitch;90;-260.743,756.9644;Inherit;False;Property;_VRSLGIShadowMask2;VRSLGI
    Enable ShadowMask 2;11;0;Create;False;0;0;0;False;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;COLOR;0,0,0,0;False;0;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;8;COLOR;0,0,0,0;False;1;COLOR;0\nNode;AmplifyShaderEditor.SimpleMultiplyOpNode;65;-346.3789,-9.85269;Inherit;False;2;2;0;FLOAT3;0,0,0;False;1;FLOAT3;-1,-1,-1;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.StaticSwitch;51;913.8101,-20.8659;Inherit;False;Property;_VRSLGIDiffuseType;VRSLGI
    Diffuse Type;4;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;REALISTIC;TOON;TINT;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.RangedFloatNode;96;-1272.026,1623.987;Inherit;False;Property;_UseVRSLShadowMask1BStrength;GI
    ShadowMask 1 B Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.SamplerNode;73;-595.6353,743.2207;Inherit;True;Property;_TextureSample0;Texture
    Sample 0;9;0;Create;True;0;0;0;False;0;False;-1;None;None;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.CustomExpressionNode;23;119.9572,42.04494;Inherit;False;       
    #ifdef _VRSLGIGLOBALLIGHTTEXTURE_ON$            int lightCount = _Udon_VRSL_GI_LightTexture.Load(
    int3(0, 2, 0) )@$        #else$            int lightCount = _VRSL_LightTexture.Load(
    int3(0, 2, 0) )@$        #endif$        return lightCount@;0;Create;0;Get Light
    Count;True;False;0;;False;0;1;INT;0\nNode;AmplifyShaderEditor.TexturePropertyNode;84;-869.9532,943.423;Inherit;True;Property;_VRSLShadowMask2;GI
    Shadow Mask 2;0;2;[NoScaleOffset];[SingleLineTexture];Create;False;0;0;0;True;0;False;None;9e9467e8be61c4a43b8d1bcc3ba4cee9;False;white;LockedToTexture2D;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1\nNode;AmplifyShaderEditor.StaticSwitch;92;-248.8418,861.1784;Inherit;False;Property;_VRSLGIShadowMask3;VRSLGI
    Enable ShadowMask 3;11;0;Create;False;0;0;0;False;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;COLOR;0,0,0,0;False;0;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;8;COLOR;0,0,0,0;False;1;COLOR;0\nNode;AmplifyShaderEditor.TexturePropertyNode;71;-948.915,543.8887;Inherit;True;Property;_VRSLShadowMask1;GI
    Shadow Mask 1;0;2;[NoScaleOffset];[SingleLineTexture];Create;False;0;0;0;True;0;False;None;9e9467e8be61c4a43b8d1bcc3ba4cee9;False;white;LockedToTexture2D;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1\nNode;AmplifyShaderEditor.TexCoordVertexDataNode;80;-1184.449,946.4153;Inherit;False;3;2;0;5;FLOAT2;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.RangedFloatNode;69;140.0638,689.4907;Inherit;False;Property;_GISpecularStrength;GI
    Specular Strength;6;0;Create;True;0;0;0;False;0;False;0.01;0;0.01;3;0;1;FLOAT;0\nNode;AmplifyShaderEditor.RangedFloatNode;100;-985.757,1492.244;Inherit;False;Property;_UseVRSLShadowMask2RStrength;GI
    ShadowMask 2 R Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.TexturePropertyNode;33;-249.0013,-696.9551;Inherit;True;Property;_VRSL_LightTexture;Custom
    GI Light Texture;0;2;[NoScaleOffset];[SingleLineTexture];Fetch;False;0;0;0;True;0;False;9e9467e8be61c4a43b8d1bcc3ba4cee9;9e9467e8be61c4a43b8d1bcc3ba4cee9;False;white;LockedToTexture2D;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1\nNode;AmplifyShaderEditor.SamplerNode;83;-595.5062,1143.817;Inherit;True;Property;_TextureSample2;Texture
    Sample 2;9;0;Create;True;0;0;0;False;0;False;-1;None;None;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.StaticSwitch;87;-250.9557,657.5628;Inherit;False;Property;_VRSLGIShadowMask1;VRSLGI
    Enable ShadowMask 1;11;0;Create;False;0;0;0;False;0;False;0;0;0;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;COLOR;0,0,0,0;False;0;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;8;COLOR;0,0,0,0;False;1;COLOR;0\nNode;AmplifyShaderEditor.CustomExpressionNode;32;-1971.939,375.9755;Float;False;;7;File;0;GetData;False;True;0;1468ceee30345b941b8766d3f87d37d0;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.TexCoordVertexDataNode;79;-1228.177,805.5139;Inherit;False;2;2;0;5;FLOAT2;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.TexturePropertyNode;85;-845.139,1149.706;Inherit;True;Property;_VRSLShadowMask3;GI
    Shadow Mask 3;0;2;[NoScaleOffset];[SingleLineTexture];Create;False;0;0;0;True;0;False;None;9e9467e8be61c4a43b8d1bcc3ba4cee9;False;white;LockedToTexture2D;Texture2D;-1;0;2;SAMPLER2D;0;SAMPLERSTATE;1\nNode;AmplifyShaderEditor.CustomExpressionNode;31;331.1783,-415.2875;Inherit;False;       
    float3 H = normalize(V+L)@$        float NdotH = saturate(dot(N,H))@$       
    float roughnessSqr = roughness*roughness * (roughness * 0.5)@$        float NdotHSqr
    = NdotH*NdotH@$$$        return max(0.000001,(1.0 / (3.1415926535*roughnessSqr*NdotHSqr*NdotHSqr))$       
    * exp((NdotHSqr-1)/(roughnessSqr*NdotHSqr)))@;1;Create;4;True;N;FLOAT3;0,0,0;In;;Inherit;False;True;V;FLOAT3;0,0,0;In;;Inherit;False;True;L;FLOAT3;0,0,0;In;;Inherit;False;True;roughness;FLOAT;0;In;;Inherit;False;BeckmanSpec;False;True;0;;False;4;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SimpleSubtractOpNode;57;-603.311,-10.6272;Inherit;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;30;544.2505,-416.4315;Inherit;False;   
    float speculargloss = (1/(roughness * roughness)) * 20@$    float specularpower
    = lerp(15, 2, roughness)@$    float3 H = normalize(V+L)@$    float NdotH = saturate(dot(N,H))@$   
    float Distribution = pow(NdotH,speculargloss) * specularpower@$    Distribution
    *= (2+specularpower) / (2*3.1415926535)@$    return Distribution@;1;Create;4;True;N;FLOAT3;0,0,0;In;;Inherit;False;True;V;FLOAT3;0,0,0;In;;Inherit;False;True;L;FLOAT3;0,0,0;In;;Inherit;False;True;roughness;FLOAT;0;In;;Inherit;False;PhongSpec;False;True;0;;False;4;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.StaticSwitch;72;-971.034,751.2798;Inherit;False;Property;_VRSLGIShadowMaskUV;VRSLGIShadowMaskUV;8;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;5;UV0;UV1;UV2;UV3;UV4;Create;True;True;All;9;1;FLOAT2;0,0;False;0;FLOAT2;0,0;False;2;FLOAT2;0,0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT2;0,0;False;6;FLOAT2;0,0;False;7;FLOAT2;0,0;False;8;FLOAT2;0,0;False;1;FLOAT2;0\nNode;AmplifyShaderEditor.StaticSwitch;67;29.41891,-650.4746;Inherit;False;Property;_VRSLGIGlobalLightTexture;VRSLGI
    Use Global Light Texture;6;0;Create;False;0;0;0;True;0;False;0;1;1;True;;Toggle;2;Key0;Key1;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.StaticSwitch;52;129.6472,-268.523;Inherit;False;Property;_VRSLGISpecularType;VRSLGI
    Specular Type;5;0;Create;True;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;3;GGX;BECKMAN;PHONG;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;29;126.8087,-416.4348;Inherit;False;        
    float alpha = roughness*roughness@$$        float3 H = normalize(V+L)@$$       
    float dotNL = saturate(dot(N,L))@$        //float dotNV = saturate(dot(N,V))@$       
    float dotNH = saturate(dot(N,H))@$        float dotLH = saturate(dot(L,H))@$$       
    float D, vis@$$        // D$        float alphaSqr = alpha*alpha@$        float
    pi = 3.14159f@$        float denom = dotNH * dotNH *(alphaSqr-1.0) + 1.0f@$       
    D = alphaSqr/(pi * denom * denom)@$$        // F$        //float dotLH5 = pow(1.0f-dotLH,5)@$       
    //F = F0 + (1.0-F0)*(dotLH5)@$$        // V$        float k = alpha/2.0f@$       
    float k2 = k*k@$        float invK2 = 1.0f-k2@$        vis = rcp(dotLH*dotLH*invK2
    + k2)@$        //vis = G1V(dotLH,k)*G1V(dotLH,k)@$        //vis = G1V(dotNL,k)*G1V(dotNV,k)@$$       
    float specular = dotNL * D * vis@$        return specular@;1;Create;4;True;N;FLOAT3;0,0,0;In;;Inherit;False;True;V;FLOAT3;0,0,0;In;;Inherit;False;True;L;FLOAT3;0,0,0;In;;Inherit;False;True;roughness;FLOAT;0;In;;Inherit;False;GGXSpec;False;True;0;;False;4;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.WorldNormalVector;66;-381.288,-247.3923;Inherit;False;True;1;0;FLOAT3;0,0,1;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.TexCoordVertexDataNode;78;-1223.435,694.9972;Inherit;False;1;2;0;5;FLOAT2;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.StaticSwitch;107;-1940.728,1230.897;Inherit;False;Property;_VRLSGIShadowMaskChannel;VRLSGI
    Set Shadow Mask Channel;26;0;Create;False;0;0;0;True;0;False;0;0;0;True;;KeywordEnum;4;R;RG;RGB;RGBA;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.StaticSwitch;108;-367.2261,-426.824;Inherit;False;Property;_VRSLGIEnableDirectionalSpotLights;VRSLGI
    Enable Directional Spot Lights;26;0;Create;True;0;0;0;True;0;False;0;0;0;True;;Toggle;2;R;RG;Create;True;True;All;9;1;FLOAT;0;False;0;FLOAT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT;0;False;7;FLOAT;0;False;8;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;106;-1717.892,990.405;Inherit;False;        
    s1Strength = 0.0@$        #if _VRLSGISHADOWMASKCHANNEL_RG$            [branch]$           
    switch(maskChannel)$            {$                case 0:$                   
    s1 = mask.r@$                    s1Strength = strength.r@$                   
    break@$                case 1:$                    s1 = mask.g@$                   
    s1Strength = strength.g@$                    break@$                default:$                   
    break@$            }$        #elif _VRLSGISHADOWMASKCHANNEL_RGB$            [branch]$           
    switch(maskChannel)$            {$                case 0:$                   
    s1 = mask.r@$                    s1Strength = strength.r@$                   
    break@$                case 1:$                    s1 = mask.g@$                   
    s1Strength = strength.g@$                    break@$                case 2:$                   
    s1 = mask.b@$                    s1Strength = strength.b@$                   
    break@$                default:$                    break@$            }$       
    #elif _VRLSGISHADOWMASKCHANNEL_RGBA$            s1 = mask[maskChannel]@$           
    s1Strength = strength[maskChannel]@$        #else$        if(maskChannel == 0)$       
    {$            s1 = mask.r@$            s1Strength =strength.r@$        }$       
    #endif;7;Create;5;True;maskChannel;INT;0;In;;Inherit;False;True;s1;FLOAT;0;InOut;;Inherit;False;True;s1Strength;FLOAT;0;InOut;;Inherit;False;True;mask;FLOAT4;0,0,0,0;In;;Inherit;False;True;strength;FLOAT4;0,0,0,0;In;;Inherit;False;SetShadowMaskChannel;False;True;0;;False;6;0;FLOAT;0;False;1;INT;0;False;2;FLOAT;0;False;3;FLOAT;0;False;4;FLOAT4;0,0,0,0;False;5;FLOAT4;0,0,0,0;False;3;FLOAT;0;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.RangedFloatNode;101;-984.957,1631.044;Inherit;False;Property;_UseVRSLShadowMask2BStrength;GI
    ShadowMask 2 B Strength;14;0;Fetch;False;0;0;0;True;0;False;0;0;0;1;0;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionOutput;0;464.3018,166.2071;Inherit;True;True;-1;VRSL
    GI;0;True;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nWireConnection;2;0;66;0\nWireConnection;82;0;84;0\nWireConnection;82;1;72;0\nWireConnection;82;7;84;1\nWireConnection;1;0;54;0\nWireConnection;10;0;65;0\nWireConnection;24;0;23;0\nWireConnection;24;1;2;0\nWireConnection;24;2;10;0\nWireConnection;24;3;1;0\nWireConnection;24;4;47;0\nWireConnection;24;5;119;0\nWireConnection;24;6;120;0\nWireConnection;24;7;5;0\nWireConnection;24;8;87;0\nWireConnection;24;9;90;0\nWireConnection;24;10;92;0\nWireConnection;24;11;69;0\nWireConnection;24;12;48;0\nWireConnection;47;0;32;0\nWireConnection;47;1;8;0\nWireConnection;59;0;57;0\nWireConnection;90;1;89;0\nWireConnection;90;0;82;0\nWireConnection;65;0;59;0\nWireConnection;73;0;71;0\nWireConnection;73;1;72;0\nWireConnection;73;7;71;1\nWireConnection;92;1;89;0\nWireConnection;92;0;83;0\nWireConnection;83;0;85;0\nWireConnection;83;1;72;0\nWireConnection;83;7;85;1\nWireConnection;87;1;89;0\nWireConnection;87;0;73;0\nWireConnection;57;0;1;0\nWireConnection;57;1;55;0\nWireConnection;72;1;77;0\nWireConnection;72;0;78;0\nWireConnection;72;2;79;0\nWireConnection;72;3;80;0\nWireConnection;72;4;81;0\nWireConnection;0;0;24;0\nASEEND*/\n//CHKSM=9C31D4374524BA5946DFBB62F0F8C00DD6C2AB68"
  m_functionName: 
  m_description: "\t"
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 0
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_customEdited: 0
    m_additionalDirectives: []
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems: []
  m_nodeCategory: 3
  m_customNodeCategory: 
  m_previewPosition: 0
  m_hidden: 0
  m_url: 
